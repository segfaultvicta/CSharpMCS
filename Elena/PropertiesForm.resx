<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="treeNode7.ToolTipText" xml:space="preserve">
    <value>Monster is a stationary defense emplacement, and is Family: Construct. Turrets are W: Lightning, and gain a +50% situational modifier to damage inflicted by actions with CTs. Turrets have 0 Evasion, cannot perform movement actions, and are immune to Push effects.</value>
  </data>
  <data name="treeNode10.ToolTipText" xml:space="preserve">
    <value>Plants are W: Fire - however, they deliver vicious statuses. Select another status when creating a plant - whenever an ability that inflicts a status misses, there's a 30 added CoS of inflicting that status to the target.</value>
  </data>
  <data name="treeNode11.ToolTipText" xml:space="preserve">
    <value>Amphibians are Family: Aquan. They are W:Fire, but receive a +100% situational modifier to all Recovery effects granted to them, including Regen but omitting Drain effects. Furthermore, they are immune to Toad. (They are already close enough.)</value>
  </data>
  <data name="treeNode13.ToolTipText" xml:space="preserve">
    <value>Humanoids can wear armor and wield weapons - they're capable of using any armor and weaponry that may be in their drop or equipment slots. If they're wielding a weapon, their weapon actions bear its properties, and their weapon power, delay, and CoS are based off of that weapon - furthermore, they can perform basic attacks with it. If they're wearing a suit of armor or an accessory, they gain its properties. If the item is stolen, they lose these benefits, so prepare for their actions without it. Monsters also bear the same equipment restrictions as player characters. (They cannot wear two suits of armor.) While building attacks using the "Attack Ability" action, you can decide that this action does not use the equipped weapon, and does not gain its properties despite being a weapon action. For example, a soldier carrying a poisonous sword might not inflict poison when he throws a grenade, despite the fact that the grenade can be dodged with Evasion.</value>
  </data>
  <data name="treeNode17.ToolTipText" xml:space="preserve">
    <value>When the battle begins, Amorphs have a (6) timer on them. When this timer reaches zero, they spawn another monster of their type, who enters the battle with 50D. This new monster then has their own timer at (6), which they can then spawn another monster with. This timer is canceled by physical Shadow damage.</value>
  </data>
  <data name="treeNode39.ToolTipText" xml:space="preserve">
    <value>The monster performs two attacks in the blink of an eye. Whenever the monster targets someone with a Weapon action, resolve it twice against them, making two to-hit rolls, applying damage twice if successful, etc.</value>
  </data>
  <data name="treeNode45.ToolTipText" xml:space="preserve">
    <value>Monsters with Fission split in two when slain by physical damage that isn't of the Shadow element. Ignore the damage from the hit that would have KOed them. Instead, create an identical copy of the monster with the exact same condition as the monster that just split. (Same delay, HP, MP, statuses, and so on.) This copy has the same chance of dropping items, but won't award EXP, Gil or JP.</value>
  </data>
  <data name="treeNode49.ToolTipText" xml:space="preserve">
    <value>"Get Back Up" is a reaction that triggers when the monster receives a turn while in SOS Condition. It immediately cures the monster for HP equal to its maximum health and restores MP equal to its maximum, instantly returning it to full fighting form. It then removes all negative statuses from the monster. Get Back Up only activates once per monster.</value>
  </data>
  <data name="treeNode52.ToolTipText" xml:space="preserve">
    <value>The monster carries an Achilles heel to a specific element, damage or tactic. Select a status or effect when Weak Spot is taken - whenever the monster's Weak Spot is struck, they receive that status (4) or effect.</value>
  </data>
  <data name="treeNode56.ToolTipText" xml:space="preserve">
    <value>This monster physically shields another monster of higher difficulty and rank - select this monster when the property is taken. As long as the monster with Body-Armor is alive and on the battlefield, Body Armor grants Armor or M.Armor to the selected monster. Select an option:</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>